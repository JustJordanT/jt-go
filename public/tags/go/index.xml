<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on </title>
    <link>//localhost:1313/tags/go/</link>
    <description>Recent content in Go on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 30 Sep 2023 13:43:53 -0600</lastBuildDate>
    <atom:link href="//localhost:1313/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building With Interfaces in Go</title>
      <link>//localhost:1313/posts/buliding-with-interfaces-in-go/</link>
      <pubDate>Sat, 30 Sep 2023 13:43:53 -0600</pubDate>
      <guid>//localhost:1313/posts/buliding-with-interfaces-in-go/</guid>
      <description>Introduction Interfaces in Go are a versatile tool that can greatly enhance the way we design and build programs. In this blog post, weâ€™ll explore how Go interfaces can be leveraged to create a flexible and extensible system for making various types of toys.&#xA;The World of Toy Creation Imagine you are developing a toy factory application in Go. Your factory can produce a wide range of toys, from teddy bears to action figures and remote-controlled cars.</description>
    </item>
    <item>
      <title>Building Structs With Go</title>
      <link>//localhost:1313/posts/building-structs-with-go/</link>
      <pubDate>Fri, 08 Sep 2023 13:43:53 -0600</pubDate>
      <guid>//localhost:1313/posts/building-structs-with-go/</guid>
      <description>Introduction Structs in the Go programming language serve as fundamental building blocks for creating custom data structures. They enable us to encapsulate and organize data effectively. In this blog post, we&amp;rsquo;ll explore Go structs by using the analogy of creating a toy to better understand their syntax, usage, and best practices.&#xA;What is a Struct? In Go, a struct is like a blueprint for creating custom data types. Think of it as a recipe for building something unique.</description>
    </item>
    <item>
      <title>communication-go-aws-sns-sqs</title>
      <link>//localhost:1313/projects/communication-go-aws-sns-sqs/</link>
      <pubDate>Fri, 08 Sep 2023 13:43:53 -0600</pubDate>
      <guid>//localhost:1313/projects/communication-go-aws-sns-sqs/</guid>
      <description>Go AWS SNS/SQS Example Github Project Link&#xA;Overview This project demonstrates a minimal setup to use AWS SNS and SQS with Go. It includes examples for publishing messages to an SNS topic, subscribing an SQS queue to that topic, and consuming messages from the queue.&#xA;Table of Contents Go AWS SNS/SQS Example Overview Table of Contents Prerequisites Installation Configuration Usage Publish to SNS Topic Consume from SQS Queue Contributing License Prerequisites Go 1.</description>
    </item>
  </channel>
</rss>
